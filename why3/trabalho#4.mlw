(*
********************************************************************************
Métodos Formais em Engenharia de Software | Exercício de avaliação Why3
Aluno: Simão Pedro Sá Cunha
Número: A93262
Curso: MIEI
********************************************************************************
ENUNCIADO:

Este exercício é baseado no modelo de um sistema de email. 

O sistema é modelado por duas variáveis de estado: 
- "sent" (um conjunto de mensagens)
- "inbox" (um dicionário mapeando utilizadores a conjuntos de mensagens - caixas individuais)

O objetivo principal é completar as especificações das duas funções "send" e "receive", de forma a que:
- o tipo invariante dado é respeitado
- as execuções de scenario1 e scenario2 sejam totalmente verificadas.
- o scenario3 não deve ser totalmente verificado, uma vez que contém um erro - tem o papel de controlo de sanidade

Deves escrever pré-condições e pós-condições adequadas para o "send" e "receive".

Se pedido, sê livre de fortificar o invariante de tipo, incluindo informação adicional.

Todas as condições de verificação geradas devem ser provadas na plataforma TryWhy3, 
com a exceção de algumas condições de verificação geradas para o Scenario3
********************************************************************************
*)

module Email
  use int.Int
  type user 
  type content
  type message = { from : user;
       	       	   tto : user; 
                   content : content }

  clone set.SetApp with type elt = message
  clone fmap.MapApp with type key = user 

  type statetype = { mutable sent : set ; mutable inbox : t set }
    invariant { (forall u :user, m :message. 
            mem u inbox /\ SetApp.mem m (inbox u) -> m.tto = u) 
            /\ 
            true }
    by { sent = empty() ; inbox = create() }

  val state : statetype

  (*********************Função de envio de um e-mail************************)
  let send (f t :user) (c :content) : () 
    (****************************Pré-condições******************************)
    (*A mensagem enviada não pode estar com o estado "sent" antes do envio de um e-mail*)
    requires {let m = { from=f ; tto=t ; content=c } in not SetApp.mem m state.sent}
    
    (****************************Pós-condições******************************)
    (*A mensagem enviada tem de estar como o estado "sent" depois do envio de um e-mail*)
    ensures  { let m = { from=f ; tto=t ; content=c } in SetApp.mem m state.sent}
    (*Todas as mensagens com tinham o estado "sent* permanecem com esse estado depois de uma transição de estados*)
    ensures  { forall m':message. SetApp.mem m' (old state.sent) -> SetApp.mem m' state.sent}
    (*O número de mensagens com o estado "sent" vai ser incrementado depois da execução desta função*)
    ensures  { (cardinal (state.sent) = cardinal (old state.sent) + 1) }
    
    writes   { state.sent }
  = let m = { from=f ; tto=t ; content=c } in 
    state.sent <- SetApp.add m state.sent

  (*********************Função de receção de um e-mail**********************)
  let receive (t :user) (m :message) : ()
    (****************************Pré-condições******************************)
    (*Utilizador tem que ter o estado "inbox", visto que recebeu o e-mail*)
    requires { mem t state.inbox }
    (*A mensagem enviada tem que ser dirigida ao utilizador "t"*)
    requires { m.tto = t }
    (*A mensagem tem que ter o estado "sent", visto que foi esse objeto que foi enviado*)
    requires { SetApp.mem m state.sent }

    (****************************Pós-condições******************************)
    (*O número de mensagens com o estado "sent" vai ser decrementado depois da execução desta função*)
    ensures  {cardinal state.sent = cardinal (old state.sent) -1}
    (*A mensagem tem de constar na caixa de entrada do recetor t (estado "inbox")*)
    ensures  {SetApp.mem m (state.inbox t)}
    (*A mensagem recebida não pode estar no estado "sent", pois nesta função a mensagem não foi enviada, mas sim recebida*)
    ensures  {not SetApp.mem m state.sent}
    (*Todas os utilizadores que têm o estado "inbox* permanecem com esse estado depois de uma transição de estados*)
    ensures  {forall u:user. mem u (old state.inbox) -> mem u state.inbox}
    (*Todas as mensagens que têm estado "sent" (exceto a mensagem enviado - mensagem como input), continuam a pertencer depois de uma transição de estados*)
    ensures  {forall m':message. SetApp.mem m' (old state.sent) -> SetApp.mem m' state.sent \/ m' = m}
    (*Todas as mensagens que têm estado "inbox" permanecem com o mesmo estado, incluindo a nova mensagem enviada*)
    ensures  {forall m':message. SetApp.mem m' (state.inbox t) -> SetApp.mem m' (old state.inbox t) \/ (m' = m)}
  
 

    
    writes   { state.sent, state.inbox }
  = let umsgs = SetApp.add m (find t state.inbox) in
    state.inbox <- add t umsgs state.inbox;
    state.sent <- SetApp.remove m state.sent




  val u :user
  val f :user
  val t :user
  val c :content


  let scenario1 ()
    requires { let m = { from=u ; tto=u ; content=c } 
               in not SetApp.mem m state.sent }
    requires { mem u state.inbox }
    ensures  { cardinal (state.sent) = cardinal (old state.sent) }
  = send u u c ; receive u { from=u ; tto=u ; content=c } 


  let scenario2 ()
    requires { SetApp.is_empty(state.sent) }
    requires { mem u state.inbox }
    requires { mem t state.inbox }
    requires { u<>t }        
    ensures  { SetApp.is_empty(state.sent) }
  = send f u c ; send f t c ; receive u { from=f ; tto=u ; content=c } ; receive t { from=f ; tto=t ; content=c } 


  (* FAIL - checks inconsistencies *)
  let scenario3 ()  
    requires { let m = { from=u ; tto=u ; content=c } in not SetApp.mem m state.sent }
    requires { mem u state.inbox }
    ensures  { cardinal (state.sent) = cardinal (old state.sent) }
  = send u u c ; receive u { from=f ; tto=u ; content=c } 




end

























(*
Link para teste:

https://why3.lri.fr/try/?name=test.mlw&lang=whyml&code=A7Hp8NN7JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJp8NNzM%2FD%2Bp3todos5Formais0emyEngenharia%2F0de6Software783Exerc%2FD%2Bt1ciop4avalia%2FD%2Bn%2FD%2Bjzo2Why38NN3Aluno7v1Sim%2FD%2Bjp3PedrozS%2FD%2BhB3Cunha8NNzN%2FD%2B62merom4A932628NN3Cursor2MIEI8NNV8NNyENUNCIADO%2Fq8NN8NN2Este3exerc%2FD%2BtaB%2FD%2BpB5baseado0no4modeloX0um5sistemar3email7tB8NN8NNzOpB%2FD%2BpB6modelado1por2duas2vari%2FD%2Bh2veisk4estadobB8NN7s7h2sents7nd6conjuntolymensagens%2F7o8NNlmA3inboxAsll4dicion%2FD%2Bh1rio6mapeandoyutilizadores%2Fzayconjuntos%2Fggh4caixasyindividuais%2Fe8NN8NNT6objetivoyprincipal%2FB%2FD%2BpBycompletar%2F0asyespecifica%2F%2FD%2Bn%2FD%2B10es1dasP1fun%2FD%2Bn%2FD%2B1qBV2sendsBzes5receive7BrZ3formaW1que7v8NNWzo2tipoyinvariante%2F2dadoB%2FD%2BpByrespeitado%2F8NNoY3execu%2FD%2Bn%2FD%2B1bgyscenario1%2Fbyscenario2%2F3sejamytotalmente%2Fyverificadas%2F7t8NNidyscenario3%2Fzn%2FD%2Bjr2deve1serlyverificado%2F7r1uma1vezT2cont%2FD%2Bpzmuj2erroe1temf3papelV6controlos6sanidade8NN8NN3Deves6escrever0pr%2FD%2BpkA3condi%2FD%2Bn%2FD%2B1OPzp%2FD%2BzzsAoAo%2FD%2Bn%2FD%2B1oyadequadas%2F2paraeB7hAuyAsBjBsuy7Bt8NN8NN0Se4pedidoPf%2FD%2BqB3livreYyfortificar%2Fhu1qu0myincluindo%2F5informa%2FD%2Bn%2FD%2Bjnyadicional%2F7t8NN8NN3Todasu2V%2FD%2Bn%2FD%2B1Vi6verifica%2FD%2Bn%2FD%2Bjl5geradas3devemu96provadas0nayplataforma%2F5TryWhy3bB8NN1comza2exce%2FD%2Bn%2FD%2Bjig5algumasd%2FD%2Bn%2FD%2B1dqd%2FD%2Bn%2FD%2BjodvNryScenario3%2F8NNuR8NN7Jo8NN8NN4module3Email8NH1use1intSA1Int8NH2type2userB8NHs5content8NHs5message7y772fromB7vm7w8NMG8JCCCB8JCB1ttoBqqqB8NMSkBqs798NN8NMB3clone1setfA4SetApp2withe1elted8NHl2fmapl4MapAppll1keyldB8NN8NHqystatetype%2FqZ5mutableufBacBZpugpztoY8NJyinvariant%2Fk7n4forallzulAd7rzmqAUWB8NML1memme7O3Qoolhnm7o7MzomAvwVnnB8NHiB8NH2trueZ8NMD0byZTl3emptyA7HoRdp4createpk8NN8NF1val3stateVv48NN8NH7HJJJJJJJJJJJJJJJJJJJJpA1Fun%2FD%2Bn%2FD%2Bjzovj3enviosvAzeA7sA2mailA7JJJJJJJJJJJJJJJJJJJJJJJJo8NH1letvJ7nzfztdAv57oozcpAvtprVB8NJ7HJJJJJJJJJJJJJJJJJJJJJJJJJJJpA0Pr%2FD%2BpeAvf%2FD%2Bn%2FD%2B1vfA7JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJo8NHuAAzA6mensagem5enviadazn%2FD%2BjR2pode3estarvbqud7hv7AsB3antes0dowDwDwDzeAYwDAvh8NH6requires77AwDzm7yqvmArAzf7wv1AqAztBqwDAqAzc790in1notvy7tvyev6qAQAl8NH8NHwBAzP%2FD%2BzzsAUwC%2FD%2Bn%2FD%2B1wCwC8NHwCAzAwCwCu%2FwIwC2comozowD7hasB4depoiswEwEkwEzeZwEAwE8NH5ensuresC77wFzm7yqwFArAzf7wwFqztBqwFAqzcB79wFwG7twGfwGqRAm8NHwKvRvRujv%2F4tinhamzowL7hjA7pypermanecem%2Fm2essenwLwNu54transi%2FD%2Bn%2FD%2Bjiq5estadoswO8NHwOC77vrU7GvAvrTBQsQoA7m7n1oldwRnU7ovrjpjjjBlplA798NHwQzOzn%2FD%2B6uMWwROTPB7hAiAsB1vaivPyincrementado%2FwT0dauv%2FD%2Bn%2FD%2Bjk3destauq%2FD%2Bn%2FD%2BjrwU8NHwUC777n6cardinalsTTc7o7yBnnwXmmmm7qz1rO8NH8NH4writesCBhlllBo8NFhBwHzmBrmwHrzf7wwHAqztqwHqzciwHB8NJeee7RswTq1addcnqn8NN8NFvvAvv%2FD%2Bn%2FD%2BjPwU2rece%2FD%2Bn%2FD%2BjrrwDze7swDA7JJJJJJJJJJJJJJJJJJJJJJo8NHRvB7nT7vvw7opZpAwLprvw8NJv1vw%2FD%2Bpfv0%2FD%2Bn%2FD%2B1v0v08NHwHyUtilizador%2Fv2u31terTwIB7hvpuq3vistom5recebeumPdPwO8NHvv77wBOwX7te798NHXzAvwvwVawD6dirigida0aoyutilizador%2FTe7BJo8NHaazmbwOB7yBma8NHaaabbwlRwlcwTwkwkm1foiv44objetoqq5enviadowl8NHVVwQVwkTwkqeV8NN8NHwczP%2FD%2Bzzs7swd%2FD%2Bn%2FD%2B1wdwd8NHOzOzn%2FD%2B6v%2BwTv%2Bv%2Bzown7hbAsBv%2Bwdydecrementado%2Fv%2Fv%2Fv%2F%2FD%2Bn%2FD%2Bjkv%2Fv%2F%2FD%2Bn%2FD%2Bjrwn8NHv%2FC77Av%2Fwo7tdB7yBp7nv%2Fnnn7o7sz1A798NHOzAwawaO5constarvL3caixaq5entradavx5recetorztZwq7hwR7BIJo8NHRCRAwgUwgzmjRpkh7I98NHVVV6recebidazn%2FD%2BjzovsvuuUXXwvwV2pois3nestawq%2FD%2Bn%2FD%2Bjjzafg%2FD%2BjqwZwO7r1mas1simawo8NHwzC77AvswyPwyzmwyqWA798NHOvu0osufwUzt%2FD%2BqjWw07hwvA7pvvwbwRnwdwmvvvv%2FD%2Bn%2FD%2BjiqvvQ8NHQCQAvvzuA7vv%2FQBOp7nwcw0oW7ovwllnnn798NHw0w0vtwSw0zt%2FD%2BqzmQ7hwxAsa4excetozawpwLB7sBrvr3input7Irycontinuam%2Fmypertencer%2Fwzw1wzwz%2FD%2Bn%2FD%2Bjzoqwzwz8NHwzC77wzVvtAv77tBwrswzo7mSwxwynO7owxjpjjjlpl7Xuoo7yBr798NHwywywywywyzt%2FD%2Bqmwy7hwxAsBwtwtzo3mesmon7rvEza2novawwwlw58NHw5C77w5cw5w5OBw7sw7oO7nw7oUT7ow6jojjjjw5iniiiw6mkk7yBrwc8NF8NG8NN8NK8NHvtCBaBhhw3RqqfB798NFjv33umsgsBrZnvxfd2findZhnhZvv8NJpppvvjmgnnnA7w8NHqqblfq4removeenqn8NN8NN8NN8NN8NFvlzu7vwl8NHqzfqq8NHqeqq8NHqzcqvt8NN8NN8NHVurvy8NJv%2BPBpdRqBvrArAeXv5AqAqqiAqAgBOB8NMORwbUWw9fUqUl8NMDbcBmemmRm8NHw4CmwH7nmmi7obnnw7mmmmj8NFlBvmgtZXvvqfUmAqoUAqAqqUqAljB8NN8NN8NHTurR8NJVhTb6is%2BemptyAXYqYYh8NHkkTbllTm8NHmmmztmmmm8NHmmlA7RzAloCCCC8NHRCoekeAehqeek8NFZBTzfeXVppdppSndSklnSAqAnqSqkhpjiiiminiqnqjqjjB8NN8NN8NHwmB2FAILB7sB4checksyinconsistencies%2FBwy8NHxFutxFC8NJOapzmBfqZrXbZqqqaqaaxAxAxHQxDfOqOl8NHbcmemmxDm8NHxECmxA7nmmi7obBnnxAmmmmj8NFlBxDgtZXxDqfUmzfnTqnqTqkiB8NN8NN8NN8NN8NN1end8NN8NN8NN8NN8NN8NN
*)